{"version":3,"file":"static/js/873.007cd651.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled(\"button\")<any>`\r\n  background: ${(p) => p.color || \"#2e186a\"};\r\n  color: ${(p) => (p.color ? \"#2E186A\" : \"#fff\")};\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: 1px solid #edf3f5;\r\n  border-radius: 4px;\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 0.625rem;\r\n  max-width: 180px;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: #fff;\r\n    border: 1px solid rgb(255, 130, 92);\r\n    background-color: rgb(255, 130, 92);\r\n  }\r\n`;\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({\r\n  color,\r\n  fixedWidth,\r\n  children,\r\n  onClick,\r\n}: ButtonProps) => (\r\n  <StyledButton color={color} fixedWidth={fixedWidth} onClick={onClick}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n","import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n  const history = useHistory()\r\n  \r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n    history.push(\"/thank-you\")\r\n  };\r\n\r\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    if (Object.keys(values).length === 1) {\r\n          setShouldSubmit(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(\r\n    validate\r\n  ) as any;\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"right\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{(\"Style me up!\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","p","color","Button","_ref","fixedWidth","children","onClick","_jsx","useForm","validate","values","setValues","useState","errors","setErrors","shouldSubmit","setShouldSubmit","history","useHistory","useEffect","Object","keys","length","notification","message","description","push","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","email","test","Content","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","title","content","t","_jsxs","StyledInput","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","ButtonContainer","_templateObject4","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","Block","autoComplete","onSubmit","span","Input","type"],"sourceRoot":""}